{% extends 'base.html.twig' %}

{% block title %}Formulaire de création d'événements{% endblock %}

{% block body%}

	{% if editmode%}
		<h1> Modification d'un Evénement ! </h1>
	{%else %}
		<h1> Création d'un Evénement ! </h1>
	{% endif %}

	{%if errors is null%}

	{% else %}
		<h3>Erreurs dans le formulaire</h3>
		<ul>
		{% for error in errors %}
			<li>{{ error.message }}</li>
		{% endfor %}
        </ul>
	{% endif %}

	{%if erreurDejaPris is null%}

	{% else %}
		<h3> Erreur d'intégrité des donnés </h3>
		<p>{{erreurDejaPris}}</p>
	{% endif %}

    {% if erreurPeriode is null %}

    {% else %}
        <h3> Erreur d'intégrité des donnés </h3>
		<p>{{erreurPeriode}}</p>
    {% endif %}

	 {% form_theme formEvenement 'bootstrap_4_layout.html.twig' %} 

	{{form_start(formEvenement, { attr: { novalidate: 'novalidate' } })}}

	{{ form_errors(formEvenement) }}
	
	{{form_row(formEvenement.nom , {'attr' : {'placeholder': "nom de l'événement"} ,  'label': "Nom"})}}
	{{form_row(formEvenement.image, {'attr' : {'placeholder': "Url de l'image"},  'label': "Image"})}}
	{{form_row(formEvenement.description, {'attr' : {'placeholder': "Description de l'événement"},  'label': "Description"})}}

	<h4> Dates</h4>

	
	<ul class="periode"  data-prototype="{{ form_widget(formEvenement.periode.vars.prototype)|e('html_attr') }}">
		{% for periode in formEvenement.periode %}

			{{form_row(periode)}}		

		{% endfor %}
	</ul>


	<h4> Organisateurs </h4>

    
	{% dump formEvenement.organisateurs %}
	{% dump formEvenement.organisateurs.vars.prototype %}
	{% dump formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype %}
	
	{#{% dump form_widget(formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype) %}#}
    


    {%set organisateurP = formEvenement.organisateurs.vars.prototype %}

	<ul class="organisateurs" data-prototype="{{ form_widget(organisateurP)|e('html_attr') }}">

		{% for organisateur in formEvenement.organisateurs %}

			{{form_row(organisateur.nom)}}
			{{form_row(organisateur.siteWeb)}}
			{{form_row(organisateur.mail)}}
			{{form_row(organisateur.image)}}

		

			{% dump form_widget(formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype) %}
			
			<ul class="contacts"  data-prototype="{{ form_widget(organisateur.contacts.vars.prototype)|e('html_attr') }}">
		

				{% for contact in organisateur.contacts %}

					{{form_row(contact)}}

				{% endfor %}
                {% dump form_widget(formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype) %}
			</ul>

			

			<br><br><br> 

		{% endfor %}
	</ul>


    {# https://stackoverflow.com/questions/43801741/how-to-create-3-levels-form-with-data-prototypes-symfony-2-8 #}
    {#<h4 class="no-margin-top has-divider text-highlight">Compétences</h4>
        Domaines
        <div style="border: 1px solid green" id="domaineCV" class="domaineCVs" data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype)|e('html_attr') }}">

            <div style="border: 1px solid yellow" id="competencesProto" data-prototype="{{ form_widget(formEvenement.children.organisateurs)|e('html_attr') }}">
            </div>
        </div>#}


	{#<ul class="organisateurs" data-prototype="formEvenement.organisateurs.vars.prototype">
			{% for organisateur in formEvenement.organisateurs %}
				{{form_row(organisateur)}}

			{% endfor %}
	</ul>
	#}


	
	{#<ul class="organisateurs" data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype)|e('html_attr') }}">		
			{% for organisateur in formEvenement.organisateurs %}
				{{form_row(organisateur.nom)}}
				{{form_row(organisateur.siteWeb)}}
				{{form_row(organisateur.mail)}}
				{{form_row(organisateur.image)}}
				<label for="">Contacts</label>
				<ul class="contacts"  data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype)|e('html_attr') }}">
					{% for contact in organisateur.contacts %}
						{{ form_row(contact) }}
					{% endfor %}
				</ul>
			{% endfor %}
	</ul>#}




	<script >
		//https://symfony.com/doc/current/form/form_collections.html

		// revoir cette page https://stackoverflow.com/questions/26095864/symfony-2-how-to-handle-nested-collections-in-forms

		// https://symfony-collection.fuz.org/symfony3/advanced/collectionOfCollections

		// https://stackoverflow.com/questions/47039420/nested-collections-in-forms

		//https://stackoverflow.com/questions/10288845/how-to-dynamically-adds-collections-within-collections-in-symfony2-form-types

        

        var $collectionHolder;
        var $collectionHolder2;
        var $collectionHolder3;
        //var $collectionHolder4;

        // setup an "add a tag" link
        var $addPeriodeButton = $('<button type="button" class="btn btn-success add_periode_link">Ajouter une période</button>');
        var $newLinkLi = $('<li></li>').append($addPeriodeButton);

        var $addOrganisateurButton = $('<button type="button" class="btn btn-success add_organsateurs_link">Ajouter un organisateur</button>');
        var $newLinkLi2 = $('<li></li>').append($addOrganisateurButton);

        /*var $addContactButton = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
        var $newLinkLi3 = $('<li></li>').append($addContactButton);*/



        jQuery(document).ready(function() {


            
            //$lastFormOrga = $('ul.organisateurs > li:nth-last-child(2) ');

            //console.log($lastFormOrga);

            //var codeContact = $('ul.contacts:eq(0)');
            //console.log(codeContact);
                
            //var copie = codeContact.clone();
                
            //$($lastFormOrga).append(copie);



            // Get the ul that holds the collection of periode
            $collectionHolder = $('ul.periode');
            $collectionHolder2 = $('ul.organisateurs');
            //$collectionHolder3 = $(' ul.contacts:eq(0)');
            $collectionHolder3 = $(' ul.contacts');
            //console.log($(' ul.contacts:eq(0)'));
            //console.log($collectionHolder3);
            


            // add the "add a periode" anchor and li to the periode ul
            $collectionHolder.append($newLinkLi);
            $collectionHolder2.append($newLinkLi2);
           // $collectionHolder3.append($newLinkLi3);
            //$collectionHolder4.append($newLinkLi4);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolder.data('index', $collectionHolder.find(':input').length);
            $collectionHolder2.data('index', $collectionHolder2.find(':input').length);
           // $collectionHolder3.data('index', $collectionHolder3.find(':input').length);

            /*$collectionHolder3.each( function( i ) {

                var $addContactButton2 = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
                var $newLinkLi32 = $('<li></li>').append($addContactButton2);

                //console.log($(this));
                //console.log(this);
                $(this).append($newLinkLi3);
                $(this).data('index', $(this).find(':input').length);
                console.log($(this));
                //console.log(this);
                console.log($(' ul.contacts:eq(0)'))

                $addContactButton2.on('click', function(e) {

                // add a new contact form (see next code block)
                addForm($(this), $newLinkLi32);

                });
            })*/

            for( var i=0 ; i<$collectionHolder3.length ; i++)
            {
                $collectionHolderContacti = $('ul.contacts:eq('+i+')');
                console.log($collectionHolderContacti);
                console.log($('ul.contacts:eq(0)'));

                var $addContactButton = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
                var $newLinkLi3 = $('<li></li>').append($addContactButton);

                $('ul.contacts:eq('+i+')').after($collectionHolderContacti);

                $collectionHolderContacti.append($newLinkLi3);
                $collectionHolderContacti.data('index', $collectionHolderContacti.find(':input').length);

                $addContactButton.on('click', function(e) {

                // add a new contact form (see next code block)
                addForm($collectionHolderContacti, $newLinkLi3);

                });

            } 
            

            $addPeriodeButton.on('click', function(e) {
                // add a new periode form (see next code block)
                addForm($collectionHolder, $newLinkLi);
            });

            $addOrganisateurButton.on('click', function(e) {
                // add a new organisateur form (see next code block)
                addForm($collectionHolder2, $newLinkLi2);

                // on va rajouter les code pour l'ajout de contact ici

                // on récupère le formulaire organisateur qu'on vient d'ajouter
                /*$lastFormOrga = $('ul.organisateurs > li:nth-last-child(2) ');

                console.log($lastFormOrga);

                var codeContact = $('<ul> </ul>');
                console.log('!!!!!!!\n');
                codeContact.addClass('contact');
                codeContact.attr('data-prototype','{{form_widget(formEvenement.organisateurs.vars.prototype)}}|e');

                console.log(codeContact);
                
                var copie = codeContact.clone();
                
                $($lastFormOrga).append(copie);*/

                //on va essayer de lier le prototype contact avec le prototype_name

                //le eq(0) ne sert surement à rien
                var $collectionHolder4 = $('ul.contacts:eq(0)').clone();
                
                // on supprime les formulaires contact et le bouton
                $collectionHolder4.find('li').remove();
            

                var $addContactButton2 = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
                var $newLinkLi4 = $('<li></li>').append($addContactButton2);
                
                $collectionHolder4.append($newLinkLi4);
                // on recupère le le lien ajout organisateur
                var $lienOrga = $('ul.organisateurs > li:nth-last-child(1)');

                // on rajoute le lien ajout contact avant le lien ajout organisateur
                $lienOrga.before($collectionHolder4);
                $collectionHolder4.append($('<br><br><br>'));
                $collectionHolder4.data('index', $collectionHolder4.find(':input').length);
                
                var $indexOrga = $collectionHolder2.data('index')-1;
                
                $addContactButton2.on('click',function(e){

                        addContact2($collectionHolder4,$newLinkLi4,$indexOrga)

                })
                
            });

            /*$addContactButton.on('click', function(e) {

                // add a new contact form (see next code block)
                addForm($collectionHolder3, $newLinkLi3);

            });*/
            

        });

        

        function addForm($collectionHolder, $newLinkLi) {
            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');
            //console.log($collectionHolder.data('index'));
            console.log(prototype);

            // get the new index
            var index = $collectionHolder.data('index');

            var newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);
            console.log(index);
            console.log(newForm);
            /* console.log('::::::::::::\n');
            console.log($collectionHolder.data('prototype'));*/

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);
        }

        function addContact2($collectionHolder, $newLinkLi,$indexOrga) {
            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');
            //console.log($collectionHolder.data('index'));
            console.log(prototype);

            // get the new index
            var index = $collectionHolder.data('index');

            var newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);
            
            //on va lier avec les regex au bon prototype organisateur
            newForm=newForm.replace(/organisateurs_\d*/g,"organisateurs_"+$indexOrga);
            newForm=newForm.replace(/organisateurs\]\[\d*/g,"organisateurs]["+$indexOrga);
            console.log('?????????????????????????????????????\n');
            console.log(newForm);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);
        }

	</script>
	

	 {{form_row(formEvenement.lieu)}}

	 {% if editmode%}
		<button type="submit" class="btn btn-success">Modifier</button> 
	{%else %}
		<button type="submit" class="btn btn-success">Créer</button> 
	{% endif %}

	{#{{ form_rest(formEvenement) }}#}

	{#{{form_end(formEvenement)}}#}

{% endblock body %}