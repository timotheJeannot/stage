{% extends 'base.html.twig' %}

{% block title %}Formulaire de création d'événements{% endblock %}

{% block body %}

	{% if editmode%}
		<h1> Modification d'un Evénement ! </h1>
	{% else %}
		<h1> Création d'un Evénement ! </h1>
	{% endif %}

	{%if errors is null%}

	{% else %}
		<h3>Erreurs dans le formulaire</h3>
		<ul>
		{% for error in errors %}
			<li>{{ error.message }}</li>
		{% endfor %}
        </ul>
	{% endif %}

	{%if erreurDejaPris is null%}

	{% else %}
		<h3> Erreur d'intégrité des donnés </h3>
		<p>{{erreurDejaPris}}</p>
	{% endif %}

    {% if erreurPeriode is null %}

    {% else %}
        <h3> Erreur d'intégrité des donnés </h3>
		<p>{{erreurPeriode}}</p>
    {% endif %}

	 {% form_theme formEvenement 'bootstrap_4_layout.html.twig' %} 

	{{form_start(formEvenement, { attr: { novalidate: 'novalidate' } })}}

	{{ form_errors(formEvenement) }}
	
	{{form_row(formEvenement.nom , {'attr' : {'placeholder': "nom de l'événement"} ,  'label': "Nom"})}}
	{{form_row(formEvenement.image, {'attr' : {'placeholder': "Url de l'image"},  'label': "Image"})}}
	{{form_row(formEvenement.description, {'attr' : {'placeholder': "Description de l'événement"},  'label': "Description"})}}
    {{form_row(formEvenement.domaine)}}

	<h4> Dates</h4>

	
	<ul class="periode"  data-prototype="{{ form_widget(formEvenement.periode.vars.prototype)|e('html_attr') }}">
		{% for periode in formEvenement.periode %}

			{{form_row(periode)}}		

		{% endfor %}
	</ul>


	<h4> Organisateurs </h4>

    
	


    {%set organisateurP = formEvenement.organisateurs.vars.prototype %}

	<ul class="organisateurs" data-prototype="{{ form_widget(organisateurP)|e('html_attr') }}">

		{% for organisateur in formEvenement.organisateurs %}

			{{form_row(organisateur.nom)}}
			{{form_row(organisateur.siteWeb)}}
			{{form_row(organisateur.mail)}}
			{{form_row(organisateur.image)}}

		
			
			<ul class="contacts"  data-prototype="{{ form_widget(organisateur.contacts.vars.prototype)|e('html_attr') }}">
		

				{#{% for contact in organisateur.contacts %}

					{{form_row(contact)}}

				{% endfor %}
                #}
               
                {% for listeContact in organisateur.vars["value"].listeContact %}

                    {% if listeContact.evenement == formEvenement.vars["value"] %}
                        {% for contact in listeContact.contact %}

                            {#{{form_row(contact)}}#}

                            {# contact est une entity et pas un formView , je ne sais pas comment générer le formView
                            à partir du twig , donc pour l'instant on va récupérer le bon contact dans organisateurs.contacts
                            qui est un formView
                            #}

                            {% for contact2 in organisateur.contacts %}

                                {% if contact == contact2.vars["value"] %}

                                    {{form_row(contact2)}}

                                {% endif %}

                            {% endfor %}
    
                        {% endfor %}

                    {% endif %}

                {% endfor %}


			</ul>

			

			<br><br><br> 

		{% endfor %}
	</ul>

    <ul class="questions" data-prototype="{{ form_widget(formEvenement.questions.vars.prototype)|e('html_attr') }}">

        {% for question in formEvenement.questions %}

            {{form_row(question.contenu)}}
             <ul class="reponses" data-prototype="{{ form_widget(question.reponses.vars.prototype)|e('html_attr') }}">
                {% for reponse in question.reponses %}

                    {{form_row(reponse.contenu)}}

                {% endfor %}
             </ul>

        {% endfor %}

    </ul>


    {# https://stackoverflow.com/questions/43801741/how-to-create-3-levels-form-with-data-prototypes-symfony-2-8 #}
    {#<h4 class="no-margin-top has-divider text-highlight">Compétences</h4>
        Domaines
        <div style="border: 1px solid green" id="domaineCV" class="domaineCVs" data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype)|e('html_attr') }}">

            <div style="border: 1px solid yellow" id="competencesProto" data-prototype="{{ form_widget(formEvenement.children.organisateurs)|e('html_attr') }}">
            </div>
        </div>#}


	{#<ul class="organisateurs" data-prototype="formEvenement.organisateurs.vars.prototype">
			{% for organisateur in formEvenement.organisateurs %}
				{{form_row(organisateur)}}

			{% endfor %}
	</ul>
	#}


	
	{#<ul class="organisateurs" data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype)|e('html_attr') }}">		
			{% for organisateur in formEvenement.organisateurs %}
				{{form_row(organisateur.nom)}}
				{{form_row(organisateur.siteWeb)}}
				{{form_row(organisateur.mail)}}
				{{form_row(organisateur.image)}}
				<label for="">Contacts</label>
				<ul class="contacts"  data-prototype="{{ form_widget(formEvenement.organisateurs.vars.prototype.children['contacts'].vars.prototype)|e('html_attr') }}">
					{% for contact in organisateur.contacts %}
						{{ form_row(contact) }}
					{% endfor %}
				</ul>
			{% endfor %}
	</ul>#}




	<script >
		//https://symfony.com/doc/current/form/form_collections.html

		// revoir cette page https://stackoverflow.com/questions/26095864/symfony-2-how-to-handle-nested-collections-in-forms

		// https://symfony-collection.fuz.org/symfony3/advanced/collectionOfCollections

		// https://stackoverflow.com/questions/47039420/nested-collections-in-forms

		//https://stackoverflow.com/questions/10288845/how-to-dynamically-adds-collections-within-collections-in-symfony2-form-types

        

        var $collectionHolder;
        var $collectionHolder2;
        var $collectionHolder3;
        //var $collectionHolder4;

        // setup an "add a tag" link
        var $addPeriodeButton = $('<button type="button" class="btn btn-success add_periode_link">Ajouter une période</button>');
        var $newLinkLi = $('<li></li>').append($addPeriodeButton);

        var $addOrganisateurButton = $('<button type="button" class="btn btn-success add_organsateurs_link">Ajouter un organisateur</button>');
        var $newLinkLi2 = $('<li></li>').append($addOrganisateurButton);

        /*var $addContactButton = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
        var $newLinkLi3 = $('<li></li>').append($addContactButton);*/

        var $collectionHolderQuestion;
        var $addQuestionButton = $('<button type="button" class="btn btn-success add_question_link">Ajouter une question</button>');
        var $newLinkQuestion = $('<li></li>').append($addQuestionButton);


        jQuery(document).ready(function() {

            // Get the ul that holds the collection of periode
            $collectionHolder = $('ul.periode');
            $collectionHolder2 = $('ul.organisateurs');
            //$collectionHolder3 = $(' ul.contacts:eq(0)');
            $collectionHolder3 = $(' ul.contacts');
            //console.log($(' ul.contacts:eq(0)'));
            //console.log($collectionHolder3);
            $collectionHolderQuestion = $('ul.questions');
            console.log('test de la mort');
            console.log($collectionHolderQuestion);

            $collectionHolderReponse = $('ul.reponses');
            


            // add the "add a periode" anchor and li to the periode ul
            $collectionHolder.append($newLinkLi);
            $collectionHolder2.append($newLinkLi2);
            $collectionHolderQuestion.append($newLinkQuestion);
           // $collectionHolder3.append($newLinkLi3);
            //$collectionHolder4.append($newLinkLi4);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolder.data('index', $collectionHolder.find(':input').length);
            $collectionHolder2.data('index', $collectionHolder2.find(':input').length);
            $collectionHolderQuestion.data('index', $collectionHolderQuestion.find(':input').length);
           

            var tab1 =[];
            var tab2 =[];
            var tab3 =[];
            var tab4 =[];


            for( var i=0 ; i<$collectionHolder3.length ; i++)
            {
                $collectionHolderContacti = $('ul.contacts:eq('+i+')');
                console.log($collectionHolderContacti);

                var $addContactButton = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
                var $newLinkLi3 = $('<li></li>').append($addContactButton);

                $collectionHolderContacti.append($newLinkLi3);
                //$collectionHolderContacti.data('index', $collectionHolderContacti.find(':input').length);
                // le -1 c'est pour le bouton ajout contact, et le 4 c'est le nombre de input dans 
                // un formulaire de contact
                $collectionHolderContacti.data('index', ($collectionHolderContacti.find(':input').length-1)/4);
                //$collectionHolderContacti.data('index',i);
                console.log($collectionHolderContacti);
                console.log("wtf ? : "+$collectionHolderContacti.data('index'));

                // on récupère l'indice de l'organisateur pour lier les fomulaires qui vont êter crée au bon organisateur 

                //les indices passent de 0 à 5 pour les organisateurs
                // et de 0 à 11 pour les périodes ( c'est pourquoi on passe par le tableau getKeys()
                // dans le controlleur )

                //on peut essayer de récupèrer l'indice par un sélecteur et une regex
                // ou essayer de le calculer mais il faut redéfinir les $collectionHolder.data('index')
                // parce que la il compte les input mais ce n'est pas exactement ca qu'il faut faire.

                //on va donc le faire par une recherche

                //l'optimisation du code n'est pas forcément important étant donné que
                // seuls les chargés de missions utilisiront les formulaires d'insertion/modification

                // on récupère la <div> juste avant le ul.contact qui contient l'indice dans l'id
                var $preceding = $collectionHolderContacti.prev();

                // on récupère le input dans le div

                var $input = $preceding.find('input');

                // il n'y a que un nombre dans l'id de l'input et c'est l'indice
                var $array = /\d+/g.exec($input.attr('id'));

                console.log($preceding);
                console.log($array);
                console.log('pls : '+$array[0]);

                var $indexOrga = $array[0];
                tab1.push($collectionHolderContacti);
                tab2.push($addContactButton);
                tab3.push($indexOrga);
                tab4.push($newLinkLi3);

                console.log("mais ppppppppppppppppppppppkkkkkkkkkkkkkkkkkkkkkkk ?");
                console.log(tab1[i]);
                console.log($collectionHolderContacti)

                

                console.log($collectionHolderContacti);

            }

            tab2.forEach(function(element){
                
                var index = tab2.indexOf(element);
                
                element.on('click',function(e) {
                    console.log("<<<<<<<<<<<<<<<<<<<<");
                    console.log(tab1[index]);
                    console.log(">>>>>>>>>>>>>>>>>>>>");

                    addContact2(tab1[index], tab4[index],tab3[index]);
                });
            });

            //-----------------------------------------------

            var tabReponse1 =[];
            var tabReponse2 =[];
            var tabReponse3 =[];
            var tabReponse4 =[];


            for( var i=0 ; i<$collectionHolderReponse.length ; i++)
            {
                $collectionHolderReponsei = $('ul.reponses:eq('+i+')');
                console.log($collectionHolderReponsei);

                var $addReponseButton = $('<button type="button" class="btn btn-success add_reponse_link">Ajouter une réponse</button>');
                var $newLinkLiReponse = $('<li></li>').append($addReponseButton);

                $collectionHolderReponsei.append($newLinkLiReponse);
                //$collectionHolderContacti.data('index', $collectionHolderContacti.find(':input').length);
                // le -1 c'est pour le bouton ajout contact, et le 4 c'est le nombre de input dans 
                // un formulaire de contact
                $collectionHolderReponsei.data('index', ($collectionHolderReponsei.find(':input').length-1));
                //$collectionHolderContacti.data('index',i);
                //console.log($collectionHolderReponsei);
                //console.log("wtf ? : "+$collectionHolderContacti.data('index'));

                // on récupère l'indice de l'organisateur pour lier les fomulaires qui vont êter crée au bon organisateur 

                //les indices passent de 0 à 5 pour les organisateurs
                // et de 0 à 11 pour les périodes ( c'est pourquoi on passe par le tableau getKeys()
                // dans le controlleur )

                //on peut essayer de récupèrer l'indice par un sélecteur et une regex
                // ou essayer de le calculer mais il faut redéfinir les $collectionHolder.data('index')
                // parce que la il compte les input mais ce n'est pas exactement ca qu'il faut faire.

                //on va donc le faire par une recherche

                //l'optimisation du code n'est pas forcément important étant donné que
                // seuls les chargés de missions utilisiront les formulaires d'insertion/modification

                // on récupère la <div> juste avant le ul.contact qui contient l'indice dans l'id
                var $preceding = $collectionHolderReponsei.prev();

                // on récupère le input dans le div

                var $input = $preceding.find('input');

                // il n'y a que un nombre dans l'id de l'input et c'est l'indice
                var $array = /\d+/g.exec($input.attr('id'));

                console.log($preceding);
                console.log($array);
                console.log('pls : '+$array[0]);

                var $indexQuestion = $array[0];
                tabReponse1.push($collectionHolderReponsei);
                tabReponse2.push($addReponseButton);
                tabReponse3.push($indexQuestion);
                tabReponse4.push($newLinkLiReponse);


            }

            tabReponse2.forEach(function(element){
                
                var index = tabReponse2.indexOf(element);
                
                element.on('click',function(e) {
                    console.log("<<<<<<<<<<<<<<<<<<<<");
                    console.log(tab1[index]);
                    console.log(">>>>>>>>>>>>>>>>>>>>");

                    addReponse2(tabReponse1[index], tabReponse4[index],tabReponse3[index]);
                });
            });

            //-----------------------------------------------

            $addPeriodeButton.on('click', function(e) {
                // add a new periode form (see next code block)
                addForm($collectionHolder, $newLinkLi);
            });


            $addOrganisateurButton.on('click', function(e) {
                // add a new organisateur form (see next code block)
                addForm($collectionHolder2, $newLinkLi2);

                // on va rajouter les code pour l'ajout de contact ici

                // on récupère le formulaire organisateur qu'on vient d'ajouter
                /*$lastFormOrga = $('ul.organisateurs > li:nth-last-child(2) ');

                console.log($lastFormOrga);

                var codeContact = $('<ul> </ul>');
                console.log('!!!!!!!\n');
                codeContact.addClass('contact');
                codeContact.attr('data-prototype','{{form_widget(formEvenement.organisateurs.vars.prototype)}}|e');

                console.log(codeContact);
                
                var copie = codeContact.clone();
                
                $($lastFormOrga).append(copie);*/

                //on va essayer de lier le prototype contact avec le prototype_name

                //le eq(0) ne sert surement à rien
                var $collectionHolder4 = $('ul.contacts:eq(0)').clone();
                
                // on supprime les formulaires contact et le bouton
                //$collectionHolder4.find('li').remove();
                
                //on va vider ce qu'il pouvait y avoir dans le ul
                $collectionHolder4.empty();
            

                var $addContactButton2 = $('<button type="button" class="btn btn-success add_contacts_link">Ajouter un contact</button>');
                var $newLinkLi4 = $('<li></li>').append($addContactButton2);
                
                $collectionHolder4.append($newLinkLi4);
                // on recupère le le lien ajout organisateur
                var $lienOrga = $('ul.organisateurs > li:nth-last-child(1)');

                // on rajoute le lien ajout contact avant le lien ajout organisateur
                $lienOrga.before($collectionHolder4);
                $collectionHolder4.append($('<br><br><br>'));
                // on veut commencer de compter à partir de 0 donc il faut pas prendre le bouton ajout contact
                $collectionHolder4.data('index', $collectionHolder4.find(':input').length-1);
                
                var $indexOrga = $collectionHolder2.data('index')-1;
                
                $addContactButton2.on('click',function(e){

                        addContact2($collectionHolder4,$newLinkLi4,$indexOrga)

                })
                
            });

            $addQuestionButton.on('click', function(e) {
                
                addForm($collectionHolderQuestion, $newLinkQuestion);

                
                var $collectionHolder4 = $('ul.reponses:eq(0)').clone();
                
                
                $collectionHolder4.empty();
            

                var $addReponseButton2 = $('<button type="button" class="btn btn-success add_reponse_link">Ajouter une réponse</button>');
                var $newLinkLi4 = $('<li></li>').append($addReponseButton2);
                
                $collectionHolder4.append($newLinkLi4);
                // on recupère le le lien ajout organisateur
                var $lienQuestion = $('ul.questions > li:nth-last-child(1)');

                // on rajoute le lien ajout contact avant le lien ajout organisateur
                $lienQuestion.before($collectionHolder4);
                $collectionHolder4.append($('<br><br><br>'));
                // on veut commencer de compter à partir de 0 donc il faut pas prendre le bouton ajout contact
                $collectionHolder4.data('index', $collectionHolder4.find(':input').length-1);
                
                var $indexQuestion = $collectionHolderQuestion.data('index')-1;
                
                $addReponseButton2.on('click',function(e){

                        addReponse2($collectionHolder4,$newLinkLi4,$indexQuestion)

                })
            });

            /*$addContactButton.on('click', function(e) {

                // add a new contact form (see next code block)
                addForm($collectionHolder3, $newLinkLi3);

            });*/
            

        });

        

        function addForm($collectionHolder, $newLinkLi) {

            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');
            //console.log($collectionHolder.data('index'));
            console.log(prototype);

            // get the new index
            var index = $collectionHolder.data('index');

            var newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);
            console.log(index);
            console.log(newForm);
            /* console.log('::::::::::::\n');
            console.log($collectionHolder.data('prototype'));*/

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);
        }

        function addContact2($collectionHolder, $newLinkLi,$indexOrga) {

            console.log($collectionHolder);

            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');
            //console.log($collectionHolder.data('index'));
            console.log(prototype);

            // get the new index
            var index = $collectionHolder.data('index');

            var newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);
            
            //on va lier avec les regex au bon prototype organisateur
            newForm=newForm.replace(/organisateurs_\d+/g,"organisateurs_"+$indexOrga);
            newForm=newForm.replace(/organisateurs\]\[\d+/g,"organisateurs]["+$indexOrga);
            console.log('?????????????????????????????????????\n');
            console.log(newForm);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);
        }

        function addReponse2($collectionHolder, $newLinkLi,$indexOrga) {

            console.log($collectionHolder);

            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');
            //console.log($collectionHolder.data('index'));
            console.log(prototype);

            // get the new index
            var index = $collectionHolder.data('index');

            var newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);
            
            console.log('-----------------------');
            console.log($indexOrga);
            //on va lier avec les regex au bon prototype organisateur
            newForm=newForm.replace(/questions_\d+/g,"questions_"+$indexOrga);
            newForm=newForm.replace(/questions\]\[\d+/g,"questions]["+$indexOrga);
            console.log('?????????????????????????????????????\n');
            console.log(newForm);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);
        }


	</script>
	

	 {{form_row(formEvenement.lieu)}}

	 {% if editmode%}
		<button type="submit" class="btn btn-success">Modifier</button> 
	{%else %}
		<button type="submit" class="btn btn-success">Créer</button> 
	{% endif %}

	{#{{ form_rest(formEvenement) }}#}

	{#{{form_end(formEvenement)}}#}

{% endblock body %}